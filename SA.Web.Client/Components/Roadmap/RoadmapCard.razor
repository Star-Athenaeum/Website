<div class="col-auto roadmap-v1-star-citizen-card @(
                         CardData.Patches[0].EvocatiTestingDate != null && CardData.Patches[0].PTUTestingStartDate != null && CardData.Patches[0].PUReleaseDate == null ? "ptu" :
                         CardData.Patches[0].EvocatiTestingDate != null && CardData.Patches[0].PTUTestingStartDate == null && CardData.Patches[0].PUReleaseDate == null ? "evocati" :
                         CardData.Patches[0].EvocatiTestingDate == null && CardData.Patches[0].PTUTestingStartDate == null && CardData.Patches[0].PUReleaseDate == null ? "dev" : "released")">
    <RoadmapCardHeader Card="CardData" />
    <RoadmapCardBody Card="CardData" AvailableDates="AvailableDates" />
    <RoadmapCardTools Card="CardData" AvailableDates="AvailableDates" />
</div>

@inject RoadmapV1State RoadmapV1State 

@code {

    [Parameter]
    public RoadmapCardData CardData { get; set; }

    private List<DateTime> AvailableDates { get; set; } = new List<DateTime>();

    protected override async Task OnInitializedAsync()
    {
        foreach (RoadmapFeatureData f in CardData.VersionFeatures)
        {
            foreach (DateTime d in f.TaskCount.Keys.Concat(f.TasksCompleted.Keys))
            {
                if (!AvailableDates.Contains(d)) AvailableDates.Add(d);
            }
        }
        AvailableDates = AvailableDates.OrderBy(o => o.Date).Reverse().ToList();
        if (!RoadmapV1State.Roadmap_v1_SelectedDates.ContainsKey(CardData.MajorVersion + "." + CardData.MinorVersion)) RoadmapV1State.Roadmap_v1_SelectedDates.Add(CardData.MajorVersion + "." + CardData.MinorVersion, AvailableDates[0]);
        await base.OnInitializedAsync();
    }
}
