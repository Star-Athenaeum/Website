@page "/wallpapers"

<div id="photos-page" class="row">
    <div class="col">
        <div class="row justify-content-center">
            @if (ClientState.PhotographyData != null)
            {
                <Virtualize Items="ClientState.PhotographyData.Photos" Context="p">
                    <div class="col-auto media-photo-container">
                        <div class="row">
                            <div class="col header">
                                <p>@p.Title</p>
                                <small>@p.TakenDate.ToShortDateString() - @p.TakenGameVersion</small>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col align-items-stretch justify-content-center">
                                <img src="@(Globals.CoreLink + "/photography-elements/" + p.Thumbnail)" draggable="false" alt="Photo" crossorigin="anonymous" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <select @onchange="args => OnPhotoResChange(args, p)" title="Choose a resolution that suites you!">
                                    @foreach (string s in p.Resolutions)
                                    {
                                        <option>@(s.Substring(s.LastIndexOf('_') + 1, s.LastIndexOf('.') - s.LastIndexOf('_') - 1))</option>
                                    }
                                </select>
                            </div>
                            <div class="col-auto">
                                <form method="get" action="@(Globals.CoreLink + "/photography-elements/" + p.Resolutions.Find(o => o.Contains(p.Resolutions[0])))">
                                    <button type="submit" title="Download"><i class="fas fa-arrow-down"></i></button>
                                </form>
                            </div>
                        </div>
                    </div>
                </Virtualize>
            }
        </div>
    </div>
</div>

@inject UIState UIState
@inject ClientState ClientState

@code {

    protected override async Task OnParametersSetAsync()
    {
        UIState.CurrentPage = "/wallpapers";
        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        ClientState.OnPhotographyDataChanged += StateHasChanged;
        await base.OnInitializedAsync();
    }

    private void OnPhotoResChange(ChangeEventArgs e, MediaPhoto p) => p.Resolutions[0] = e.Value.ToString();
}
