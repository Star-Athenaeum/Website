<Meta charset="UTF-8" />
<!-- Primary Meta Tags -->
<Title Value="The Star Athenaeum Project"></Title>
<Link rel="icon" type="image/svg" href="/favicon.svg" />
<Meta name="title" content="The Star Athenaeum Project" />
<Meta name="description" content="The Star Athenaeum Projects provides several tools to provide a place of learning as well being informative for everything Star Citizen." />
<Meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no" />
<Meta name="theme-color" content="#0a5688" />

<!-- Open Graph / Facebook -->
<Meta property="og:type" content="website" />
<Meta property="og:url" content="https://ueesa.net/" />
<Meta property="og:title" content="The Star Athenaeum Project" />
<Meta property="og:description" content="The Star Athenaeum Projects provides several tools to provide a place of learning as well being informative for everything Star Citizen." />
<Meta property="og:image" content="https://ueesa.net/pwa-192.png" />

<!-- Twitter -->
<Meta property="twitter:card" content="summary" />
<Meta property="twitter:url" content="https://ueesa.net/" />
<Meta property="twitter:title" content="The Star Athenaeum Project" />
<Meta property="twitter:description" content="The Star Athenaeum Projects provides several tools to provide a place of learning as well being informative for everything Star Citizen." />
<Meta property="twitter:image" content="https://ueesa.net/pwa-192.png" />

<!-- PWA -->
<Link rel="manifest" href="/manifest.json" />
<Link rel="apple-touch-icon" href="/pwa-192.png" />

<CascadingAuthenticationState>
    <div id="viewport-overlay">
        <h6>The viewport/screen size is too small! Star Athenaeum strictly enforces a minimum width of 375 (relative) pixels!</h6>
    </div>
    <div id="loading-overlay">
        <img draggable="false" height="300" width="300" src="favicon.svg" alt="Logo" />
        <div class="progress progress-infinite">
            <div class="progress-bar3" />
        </div>
    </div>
    <div id="background-container" />
    <div id="router">
        <div id="webpage">
            <Router AppAssembly="@typeof(Startup).Assembly" AdditionalAssemblies="LazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <NotAuthorized>
                            @if (!context.User.Identity.IsAuthenticated)
                            {
                                <RedirectToLogin />
                            }
                            else
                            {
                                <p>
                                    You are not authorized to access
                                    this resource.
                                </p>
                            }
                        </NotAuthorized>
                    </AuthorizeRouteView>
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <h4 id="page-load-error">Uh oh! There seems to be an error loading this page!</h4>
                    </LayoutView>
                </NotFound>
            </Router>
        </div>
        <UtilitiesSideBar />
        <SettingsPanel />
        <MainNavigationBar />
    </div>
</CascadingAuthenticationState>

@inject LazyAssemblyLoader LazyLoader

@inject InitializationState InitializationState
@inject ClientState ClientState
@inject ServerState ServerState
@inject LocalStorageState LocalStorageState
@inject WebSocketManagerMiddleware WebSocketMiddleware

@inject JSInterface Javascript
@inject JSInterface.Runtime Runtime
@inject JSInterface.Cache Cache
@inject JSInterface.LocalData LocalData
@inject JSInterface.AnimationManager AnimationManager

@code {

    protected override async Task OnInitializedAsync()
    {
        await InitializationState.Init();
        await base.OnInitializedAsync();
    }

    private List<Assembly> LazyLoadedAssemblies = new List<Assembly>();

    private Task OnNavigateAsync(NavigationContext args)
    {
        if (args.Path.EndsWith("/stargazer"))
        {
            //List<Assembly> assemblies = (await LazyLoader.LoadAssembliesAsync(new string[] { "Lib1.dll" })).ToList();
            //LazyLoadedAssemblies.AddRange(assemblies);
        }
        return Task.CompletedTask;
    }
}